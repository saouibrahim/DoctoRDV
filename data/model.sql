DROP TABLE IF EXISTS LOCATIONS;
-- Table for LOCATIONS
CREATE TABLE LOCATIONS (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    postcode VARCHAR(10) NOT NULL
);
DROP TABLE IF EXISTS SPECIALIZATION;
-- Table for SPECIALIZATION
CREATE TABLE SPECIALIZATION (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL
);
DROP TABLE IF EXISTS DOCTORS;
-- Table for DOCTORS
CREATE TABLE DOCTORS (
    id SERIAL PRIMARY KEY,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(15) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    postcode VARCHAR(10) NOT NULL,
    specialization_id INT,
    FOREIGN KEY (specialization_id) REFERENCES SPECIALIZATION(id)
);
DROP TABLE IF EXISTS PATIENTS;
-- Table for PATIENTS
CREATE TABLE PATIENTS (
    id SERIAL PRIMARY KEY,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(15) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
DROP TABLE IF EXISTS AVAILABILITY;
-- Table for AVAILABILITY
CREATE TABLE AVAILABILITY (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    doctor_id INT NOT NULL,
    location_id INT NOT NULL,
    FOREIGN KEY (doctor_id) REFERENCES DOCTORS(id),
    FOREIGN KEY (location_id) REFERENCES LOCATIONS(id)
);
DROP TABLE IF EXISTS APPOINTMENT;
-- Table for APPOINTMENT
CREATE TABLE APPOINTMENT (
    id SERIAL PRIMARY KEY,
    date DATE NOT NULL,
    start_time TIME NOT NULL,
    end_time TIME NOT NULL,
    availability_id INT NOT NULL,
    patient_id INT,
    FOREIGN KEY (availability_id) REFERENCES AVAILABILITY(id),
    FOREIGN KEY (patient_id) REFERENCES PATIENTS(id)
);